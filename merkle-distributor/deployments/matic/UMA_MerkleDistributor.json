{
  "address": "0xC0B99B20D4c8711dE96c641A8b4EEB3d750eF3f0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "merkleRoot_",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "airdropRecipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenReceiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "week",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "week",
          "type": "uint32"
        }
      ],
      "name": "MerkleRootUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CLAIM_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "claimTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freeze",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "frozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "isClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "renounce",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unfreeze",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "updateMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "week",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb1ba167028014cddb4390fa47e2560da093541b0eceec2337c4e7358000f064e",
  "receipt": {
    "to": null,
    "from": "0xC8E768aF1331029bE607EB73FFb6d7357ac333Ba",
    "contractAddress": "0xC0B99B20D4c8711dE96c641A8b4EEB3d750eF3f0",
    "transactionIndex": 42,
    "gasUsed": "1089261",
    "logsBloom": "0x
    "blockHash": "0x160d6cf0017e3e4842767bf0bd83f9afe061d5fea5ff73b857cc8f4a373c75ce",
    "transactionHash": "0xb1ba167028014cddb4390fa47e2560da093541b0eceec2337c4e7358000f064e",
    "logs": [
      {
        "transactionIndex": 42,
        "blockNumber": 25314092,
        "transactionHash": "0xb1ba167028014cddb4390fa47e2560da093541b0eceec2337c4e7358000f064e",
        "address": "0xC0B99B20D4c8711dE96c641A8b4EEB3d750eF3f0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c8e768af1331029be607eb73ffb6d7357ac333ba"
        ],
        "data": "0x",
        "logIndex": 177,
        "blockHash": "0x160d6cf0017e3e4842767bf0bd83f9afe061d5fea5ff73b857cc8f4a373c75ce"
      },
      {
        "transactionIndex": 42,
        "blockNumber": 25314092,
        "transactionHash": "0xb1ba167028014cddb4390fa47e2560da093541b0eceec2337c4e7358000f064e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c8e768af1331029be607eb73ffb6d7357ac333ba",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000745da91fa4f52b00000000000000000000000000000000000000000000000044ef33d9234bcc22000000000000000000000000000000000000000000001f2e53b747740ee8e816000000000000000000000000000000000000000000000000447ad63003a6d6f7000000000000000000000000000000000000000000001f2e542ba51d2e8ddd41",
        "logIndex": 178,
        "blockHash": "0x160d6cf0017e3e4842767bf0bd83f9afe061d5fea5ff73b857cc8f4a373c75ce"
      }
    ],
    "blockNumber": 25314092,
    "cumulativeGasUsed": "6701891",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3066818837c5e6ed6601bd5a91b0762877a6b731",
    "0x59de428a13130f79ddd1c3e8705291647e1e6265b840e8978ab169f8eb067436"
  ],
  "solcInputHash": "5947adfc028f23192e147724dbf45f0a",
  "metadata": "{\"compiler\":{\"version\":\"0.6.9+commit.3e3065ac\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airdropRecipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"week\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"week\",\"type\":\"uint32\"}],\"name\":\"MerkleRootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claimTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unfreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"updateMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"week\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/test/UMA_MerkleDistributor.sol\":\"UMA_MerkleDistributor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\",\"keccak256\":\"0x94c4719c16ffb96dd3cdc68f6fbf78105153018adbf382241821e8188e6a4bd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle trees (hash trees),\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\",\"keccak256\":\"0x782ac63a026ef1d6ab242478016bf7006074726786de9a94bc6c0c33a87dd40d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\n\\n// P1 - P3: OK\\npragma solidity 0.6.9;\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\n// T1 - T4: OK\\ncontract OwnableData {\\n    // V1 - V5: OK\\n    address public owner;\\n    // V1 - V5: OK\\n    address public pendingOwner;\\n}\\n\\n// T1 - T4: OK\\ncontract Ownable is OwnableData {\\n    // E1: OK\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () internal {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    // F1 - F9: OK\\n    // C1 - C21: OK\\n    function transferOwnership(address newOwner, bool direct, bool renounce) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    // F1 - F9: OK\\n    // C1 - C21: OK\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    // M1 - M5: OK\\n    // C1 - C21: OK\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x88a2fa72897cd3923c44544d4685d5d2920bca29d1d551b126c202d26bf60dfd\",\"license\":\"MIT\"},\"contracts/interfaces/IMerkleDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.5.0;\\n\\n// Allows anyone to claim a token if they exist in a merkle root.\\ninterface IMerkleDistributor {\\n    // Returns the address of the token distributed by this contract.\\n    function token() external view returns (address);\\n    // Returns the merkle root of the merkle tree containing account balances available to claim.\\n    function merkleRoot() external view returns (bytes32);\\n    // Returns the current claiming week\\n    function week() external view returns (uint32);\\n    // Returns true if the claim function is frozen\\n    function frozen() external view returns (bool);\\n    // Returns true if the index has been marked claimed.\\n    function isClaimed(uint256 index) external view returns (bool);\\n    // Claim the given amount of the token to the given address. Reverts if the inputs are invalid.\\n    function claim(uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) external;\\n    // Claim the given amount of token to the recipient address given a signature from air drop recipient.\\n    function claimTo(\\n        uint256 index,\\n        uint256 amount,\\n        bytes32[] calldata merkleProof,\\n        address recipient,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n    // Freezes the claim function and allow the merkleRoot to be changed.\\n    function freeze() external;\\n    // Unfreezes the claim function.\\n    function unfreeze() external;\\n    // Update the merkle root and increment the week.\\n    function updateMerkleRoot(bytes32 newMerkleRoot) external;\\n\\n    // This event is triggered whenever a call to #claim succeeds.\\n    event Claimed(uint256 index, uint256 amount, address indexed airdropRecipient, address indexed tokenReceiver, uint256 indexed week);\\n    // This event is triggered whenever the merkle root gets updated.\\n    event MerkleRootUpdated(bytes32 indexed merkleRoot, uint32 indexed week);\\n}\\n\",\"keccak256\":\"0x42b1fa84128c9f325f6a0a99e5b4cf9311081a51f9adcbed80ce5260808a274e\",\"license\":\"UNLICENSED\"},\"contracts/test/UMA_MerkleDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\nimport \\\"../interfaces/IMerkleDistributor.sol\\\";\\nimport \\\"../Ownable.sol\\\";\\n\\n\\ncontract UMA_MerkleDistributor is IMerkleDistributor, Ownable {\\n    address public immutable override token;\\n    bytes32 public override merkleRoot;\\n    uint32 public override week;\\n    bool public override frozen;\\n\\n    // This is a packed array of booleans.\\n    mapping(uint256 => mapping(uint256 => uint256)) private claimedBitMap;\\n\\n\\t// Total claimed for receiver addresses. for informational purposes only\\n    mapping(address => uint256) public totalClaimed;\\n\\n    string public constant NAME = \\\"PolyMarket Distributor\\\";\\n\\n    // The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\n        \\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"\\n    );\\n\\n    // The EIP-712 typehash for the claim id struct\\n    bytes32 public constant CLAIM_TYPEHASH = keccak256(\\n        \\\"Claim(address recipient,uint256 amount,uint32 week,uint256 index)\\\"\\n    );\\n\\n    constructor(address token_, bytes32 merkleRoot_) public {\\n        require(token_ != address(0), \\\"MerkleDistributor: invalid token\\\");\\n        token = token_;\\n        merkleRoot = merkleRoot_;\\n        week = 0;\\n        frozen = false;\\n    }\\n\\n    function claim(uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) external override {\\n        require(!frozen, \\\"MerkleDistributor: Claiming is frozen.\\\");\\n        require(!isClaimed(index), \\\"MerkleDistributor: Drop already claimed.\\\");\\n\\n        _claim(index, account, account, amount, merkleProof);\\n    }\\n\\n    function claimTo(\\n        uint256 index,\\n        uint256 amount,\\n        bytes32[] calldata merkleProof,\\n        address recipient,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        require(!frozen, \\\"MerkleDistributor: Claiming is frozen.\\\");\\n        require(!isClaimed(index), \\\"MerkleDistributor: Drop already claimed.\\\");\\n\\n        bytes32 domainSeparator = keccak256(abi.encode(\\n            DOMAIN_TYPEHASH,\\n            keccak256(bytes(NAME)),\\n            getChainIdInternal(),\\n            address(this)\\n        ));\\n        bytes32 structHash = keccak256(abi.encode(CLAIM_TYPEHASH, recipient, amount, week, index));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ECDSA.recover(digest, v, r, s);\\n\\n        _claim(index, signatory, recipient, amount, merkleProof);\\n    }\\n\\n    function isClaimed(uint256 index) public view override returns (bool) {\\n        uint256 claimedWordIndex = index / 256;\\n        uint256 claimedBitIndex = index % 256;\\n        uint256 claimedWord = claimedBitMap[week][claimedWordIndex];\\n        uint256 mask = (1 << claimedBitIndex);\\n        return claimedWord & mask == mask;\\n    }\\n\\n    function freeze() public override onlyOwner {\\n        frozen = true;\\n    }\\n\\n    function unfreeze() public override onlyOwner {\\n        frozen = false;\\n    }\\n\\n    function updateMerkleRoot(bytes32 _merkleRoot) public override onlyOwner {\\n        require(frozen, \\\"MerkleDistributor: Contract not frozen.\\\");\\n\\n        // Increment the week (simulates the clearing of the claimedBitMap)\\n        week = week + 1;\\n        // Set the new merkle root\\n        merkleRoot = _merkleRoot;\\n\\n        emit MerkleRootUpdated(merkleRoot, week);\\n    }\\n\\n    function _claim(uint256 index, address airdropRecipient, address tokenReceiver, uint256 amount, bytes32[] calldata merkleProof) internal {\\n        // Verify the merkle proof.\\n        bytes32 node = keccak256(abi.encodePacked(index, airdropRecipient, amount));\\n        require(MerkleProof.verify(merkleProof, merkleRoot, node), \\\"MerkleDistributor: Invalid proof.\\\");\\n\\n        // Mark it claimed and send the token.\\n        _setClaimed(index);\\n        require(IERC20(token).transfer(tokenReceiver, amount), \\\"MerkleDistributor: Transfer failed.\\\");\\n\\n\\t\\ttotalClaimed[airdropRecipient] += amount;\\n\\n        emit Claimed(index, amount, airdropRecipient, tokenReceiver, week);\\n    }\\n\\n    function getChainIdInternal() internal pure returns (uint) {\\n        uint chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n\\n    function _setClaimed(uint256 index) private {\\n        uint256 claimedWordIndex = index / 256;\\n        uint256 claimedBitIndex = index % 256;\\n        claimedBitMap[week][claimedWordIndex] = claimedBitMap[week][claimedWordIndex] | (1 << claimedBitIndex);\\n    }\\n}\\n\",\"keccak256\":\"0x054fd57d34a9aa5b67ee00e761c933b806205b9bb356b76e0fce0547e4e1b8d7\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516112e73803806112e78339818101604052604081101561003357600080fd5b508051602090910151600080546001600160a01b0319163390811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36001600160a01b0382166100d6576040805162461bcd60e51b815260206004820181905260248201527f4d65726b6c654469737472696275746f723a20696e76616c696420746f6b656e604482015290519081900360640190fd5b606082901b6001600160601b0319166080526002556003805464ffffffffff191690556001600160a01b03166111c961011e60003980610b4f5280610c3b52506111c96000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80636a28f000116100a2578063a3f4df7e11610071578063a3f4df7e146102ba578063cadb9b8d14610337578063e30c3978146103cf578063ef5d9ae8146103d7578063fc0c546a146103fd57610116565b80636a28f000146102695780636b0509b1146102715780638da5cb5b146102795780639e34070f1461029d57610116565b80632eb4a7ab116100e95780632eb4a7ab146102135780634783f0ef1461021b5780634995b458146102385780634e71e0c81461025957806362a5af3b1461026157610116565b8063054f7d9c1461011b578063078dfbe71461013757806320606b701461016f5780632e7ba6ef14610189575b600080fd5b610123610405565b604080519115158252519081900360200190f35b61016d6004803603606081101561014d57600080fd5b506001600160a01b03813516906020810135151590604001351515610415565b005b61017761053f565b60408051918252519081900360200190f35b61016d6004803603608081101561019f57600080fd5b8135916001600160a01b036020820135169160408201359190810190608081016060820135600160201b8111156101d557600080fd5b8201836020820111156101e757600080fd5b803590602001918460208302840111600160201b8311171561020857600080fd5b50909250905061055a565b6101776105fd565b61016d6004803603602081101561023157600080fd5b5035610603565b6102406106ec565b6040805163ffffffff9092168252519081900360200190f35b61016d6106f8565b61016d6107ba565b61016d61081d565b61017761087a565b610281610895565b604080516001600160a01b039092168252519081900360200190f35b610123600480360360208110156102b357600080fd5b50356108a4565b6102c26108dd565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102fc5781810151838201526020016102e4565b50505050905090810190601f1680156103295780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61016d600480360360e081101561034d57600080fd5b813591602081013591810190606081016040820135600160201b81111561037357600080fd5b82018360208201111561038557600080fd5b803590602001918460208302840111600160201b831117156103a657600080fd5b91935091506001600160a01b038135169060ff602082013516906040810135906060013561090f565b610281610b2c565b610177600480360360208110156103ed57600080fd5b50356001600160a01b0316610b3b565b610281610b4d565b600354600160201b900460ff1681565b6000546001600160a01b03163314610462576040805162461bcd60e51b81526020600482018190526024820152600080516020611174833981519152604482015290519081900360640190fd5b811561051e576001600160a01b03831615158061047c5750805b6104c5576040805162461bcd60e51b81526020600482015260156024820152744f776e61626c653a207a65726f206164647265737360581b604482015290519081900360640190fd5b600080546040516001600160a01b03808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b03851617905561053a565b600180546001600160a01b0319166001600160a01b0385161790555b505050565b60405180604361113182396043019050604051809103902081565b600354600160201b900460ff16156105a35760405162461bcd60e51b815260040180806020018281038252602681526020018061105c6026913960400191505060405180910390fd5b6105ac856108a4565b156105e85760405162461bcd60e51b8152600401808060200182810382526028815260200180610ff36028913960400191505060405180910390fd5b6105f6858586868686610b71565b5050505050565b60025481565b6000546001600160a01b03163314610650576040805162461bcd60e51b81526020600482018190526024820152600080516020611174833981519152604482015290519081900360640190fd5b600354600160201b900460ff166106985760405162461bcd60e51b81526004018080602001828103825260278152602001806110a46027913960400191505060405180910390fd5b6003805463ffffffff198116600163ffffffff9283160182161791829055600283905560405191169082907f1bed04c7cfb61e9a21d36517a6ed73b90844dc1ea8a74ce9f96ee2599be0db3b90600090a350565b60035463ffffffff1681565b6001546001600160a01b0316338114610758576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316179055600180549091169055565b6000546001600160a01b03163314610807576040805162461bcd60e51b81526020600482018190526024820152600080516020611174833981519152604482015290519081900360640190fd5b6003805464ff000000001916600160201b179055565b6000546001600160a01b0316331461086a576040805162461bcd60e51b81526020600482018190526024820152600080516020611174833981519152604482015290519081900360640190fd5b6003805464ff0000000019169055565b60405180604161101b82396041019050604051809103902081565b6000546001600160a01b031681565b60035463ffffffff16600090815260046020908152604080832061010085048452909152902054600160ff9092169190911b9081161490565b604051806040016040528060168152602001752837b63ca6b0b935b2ba102234b9ba3934b13aba37b960511b81525081565b600354600160201b900460ff16156109585760405162461bcd60e51b815260040180806020018281038252602681526020018061105c6026913960400191505060405180910390fd5b610961886108a4565b1561099d5760405162461bcd60e51b8152600401808060200182810382526028815260200180610ff36028913960400191505060405180910390fd5b60006040518080611131604391396040805191829003604301822082820190915260168252752837b63ca6b0b935b2ba102234b9ba3934b13aba37b960511b60209092019190915290507f7e8aa9db4fb13c5a2970c4b1df97977851593542afa27d943b1f3a0c38c0127e610a10610d91565b3060405160200180858152602001848152602001838152602001826001600160a01b03166001600160a01b031681526020019450505050506040516020818303038152906040528051906020012090506000604051808061101b60419139604080519182900360410182206003546020808501929092526001600160a01b038b1684840152606084018e905263ffffffff16608084015260a08084018f90528251808503909101815260c08401835280519082012061190160f01b60e085015260e2840187905261010280850182905283518086039091018152610122909401909252825192019190912090925090506000610b0e82888888610d95565b9050610b1e8c828a8e8e8e610b71565b505050505050505050505050565b6001546001600160a01b031681565b60056020526000908152604090205481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040805160208082018990526bffffffffffffffffffffffff19606089901b1682840152605480830187905283518084039091018152607483018085528151918301919091206094928602808501840190955285825293610bf593919287928792839290910190849080828437600092019190915250506002549150849050610f0f565b610c305760405162461bcd60e51b81526004018080602001828103825260218152602001806110cb6021913960400191505060405180910390fd5b610c3987610fb8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb86866040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610cb957600080fd5b505af1158015610ccd573d6000803e3d6000fd5b505050506040513d6020811015610ce357600080fd5b5051610d205760405162461bcd60e51b81526004018080602001828103825260238152602001806110ec6023913960400191505060405180910390fd5b6001600160a01b0380871660008181526005602090815260409182902080548901905560035482518c8152918201899052825163ffffffff909116948a1693927ff960c21aca9260721d7642bfc1e7e7f5e4e20cd2bd47ad9bc2d1f5309eb89489928290030190a450505050505050565b4690565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115610df65760405162461bcd60e51b81526004018080602001828103825260228152602001806110826022913960400191505060405180910390fd5b8360ff16601b1480610e0b57508360ff16601c145b610e465760405162461bcd60e51b815260040180806020018281038252602281526020018061110f6022913960400191505060405180910390fd5b604080516000808252602080830180855289905260ff88168385015260608301879052608083018690529251909260019260a080820193601f1981019281900390910190855afa158015610e9e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610f06576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b95945050505050565b600081815b8551811015610fad576000868281518110610f2b57fe5b60200260200101519050808311610f725782816040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209250610fa4565b808360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092505b50600101610f14565b509092149392505050565b60035463ffffffff1660009081526004602090815260408083206101008504845290915290208054600160ff9093169290921b909117905556fe4d65726b6c654469737472696275746f723a2044726f7020616c726561647920636c61696d65642e436c61696d286164647265737320726563697069656e742c75696e7432353620616d6f756e742c75696e743332207765656b2c75696e7432353620696e646578294d65726b6c654469737472696275746f723a20436c61696d696e672069732066726f7a656e2e45434453413a20696e76616c6964207369676e6174757265202773272076616c75654d65726b6c654469737472696275746f723a20436f6e7472616374206e6f742066726f7a656e2e4d65726b6c654469737472696275746f723a20496e76616c69642070726f6f662e4d65726b6c654469737472696275746f723a205472616e73666572206661696c65642e45434453413a20696e76616c6964207369676e6174757265202776272076616c7565454950373132446f6d61696e28737472696e67206e616d652c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e7472616374294f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212200a77e00f3454d6f207f57bf66cf0f5a9f83462540232ef032773e9ef6a14015564736f6c63430006090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80636a28f000116100a2578063a3f4df7e11610071578063a3f4df7e146102ba578063cadb9b8d14610337578063e30c3978146103cf578063ef5d9ae8146103d7578063fc0c546a146103fd57610116565b80636a28f000146102695780636b0509b1146102715780638da5cb5b146102795780639e34070f1461029d57610116565b80632eb4a7ab116100e95780632eb4a7ab146102135780634783f0ef1461021b5780634995b458146102385780634e71e0c81461025957806362a5af3b1461026157610116565b8063054f7d9c1461011b578063078dfbe71461013757806320606b701461016f5780632e7ba6ef14610189575b600080fd5b610123610405565b604080519115158252519081900360200190f35b61016d6004803603606081101561014d57600080fd5b506001600160a01b03813516906020810135151590604001351515610415565b005b61017761053f565b60408051918252519081900360200190f35b61016d6004803603608081101561019f57600080fd5b8135916001600160a01b036020820135169160408201359190810190608081016060820135600160201b8111156101d557600080fd5b8201836020820111156101e757600080fd5b803590602001918460208302840111600160201b8311171561020857600080fd5b50909250905061055a565b6101776105fd565b61016d6004803603602081101561023157600080fd5b5035610603565b6102406106ec565b6040805163ffffffff9092168252519081900360200190f35b61016d6106f8565b61016d6107ba565b61016d61081d565b61017761087a565b610281610895565b604080516001600160a01b039092168252519081900360200190f35b610123600480360360208110156102b357600080fd5b50356108a4565b6102c26108dd565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102fc5781810151838201526020016102e4565b50505050905090810190601f1680156103295780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61016d600480360360e081101561034d57600080fd5b813591602081013591810190606081016040820135600160201b81111561037357600080fd5b82018360208201111561038557600080fd5b803590602001918460208302840111600160201b831117156103a657600080fd5b91935091506001600160a01b038135169060ff602082013516906040810135906060013561090f565b610281610b2c565b610177600480360360208110156103ed57600080fd5b50356001600160a01b0316610b3b565b610281610b4d565b600354600160201b900460ff1681565b6000546001600160a01b03163314610462576040805162461bcd60e51b81526020600482018190526024820152600080516020611174833981519152604482015290519081900360640190fd5b811561051e576001600160a01b03831615158061047c5750805b6104c5576040805162461bcd60e51b81526020600482015260156024820152744f776e61626c653a207a65726f206164647265737360581b604482015290519081900360640190fd5b600080546040516001600160a01b03808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b03851617905561053a565b600180546001600160a01b0319166001600160a01b0385161790555b505050565b60405180604361113182396043019050604051809103902081565b600354600160201b900460ff16156105a35760405162461bcd60e51b815260040180806020018281038252602681526020018061105c6026913960400191505060405180910390fd5b6105ac856108a4565b156105e85760405162461bcd60e51b8152600401808060200182810382526028815260200180610ff36028913960400191505060405180910390fd5b6105f6858586868686610b71565b5050505050565b60025481565b6000546001600160a01b03163314610650576040805162461bcd60e51b81526020600482018190526024820152600080516020611174833981519152604482015290519081900360640190fd5b600354600160201b900460ff166106985760405162461bcd60e51b81526004018080602001828103825260278152602001806110a46027913960400191505060405180910390fd5b6003805463ffffffff198116600163ffffffff9283160182161791829055600283905560405191169082907f1bed04c7cfb61e9a21d36517a6ed73b90844dc1ea8a74ce9f96ee2599be0db3b90600090a350565b60035463ffffffff1681565b6001546001600160a01b0316338114610758576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316179055600180549091169055565b6000546001600160a01b03163314610807576040805162461bcd60e51b81526020600482018190526024820152600080516020611174833981519152604482015290519081900360640190fd5b6003805464ff000000001916600160201b179055565b6000546001600160a01b0316331461086a576040805162461bcd60e51b81526020600482018190526024820152600080516020611174833981519152604482015290519081900360640190fd5b6003805464ff0000000019169055565b60405180604161101b82396041019050604051809103902081565b6000546001600160a01b031681565b60035463ffffffff16600090815260046020908152604080832061010085048452909152902054600160ff9092169190911b9081161490565b604051806040016040528060168152602001752837b63ca6b0b935b2ba102234b9ba3934b13aba37b960511b81525081565b600354600160201b900460ff16156109585760405162461bcd60e51b815260040180806020018281038252602681526020018061105c6026913960400191505060405180910390fd5b610961886108a4565b1561099d5760405162461bcd60e51b8152600401808060200182810382526028815260200180610ff36028913960400191505060405180910390fd5b60006040518080611131604391396040805191829003604301822082820190915260168252752837b63ca6b0b935b2ba102234b9ba3934b13aba37b960511b60209092019190915290507f7e8aa9db4fb13c5a2970c4b1df97977851593542afa27d943b1f3a0c38c0127e610a10610d91565b3060405160200180858152602001848152602001838152602001826001600160a01b03166001600160a01b031681526020019450505050506040516020818303038152906040528051906020012090506000604051808061101b60419139604080519182900360410182206003546020808501929092526001600160a01b038b1684840152606084018e905263ffffffff16608084015260a08084018f90528251808503909101815260c08401835280519082012061190160f01b60e085015260e2840187905261010280850182905283518086039091018152610122909401909252825192019190912090925090506000610b0e82888888610d95565b9050610b1e8c828a8e8e8e610b71565b505050505050505050505050565b6001546001600160a01b031681565b60056020526000908152604090205481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040805160208082018990526bffffffffffffffffffffffff19606089901b1682840152605480830187905283518084039091018152607483018085528151918301919091206094928602808501840190955285825293610bf593919287928792839290910190849080828437600092019190915250506002549150849050610f0f565b610c305760405162461bcd60e51b81526004018080602001828103825260218152602001806110cb6021913960400191505060405180910390fd5b610c3987610fb8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb86866040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610cb957600080fd5b505af1158015610ccd573d6000803e3d6000fd5b505050506040513d6020811015610ce357600080fd5b5051610d205760405162461bcd60e51b81526004018080602001828103825260238152602001806110ec6023913960400191505060405180910390fd5b6001600160a01b0380871660008181526005602090815260409182902080548901905560035482518c8152918201899052825163ffffffff909116948a1693927ff960c21aca9260721d7642bfc1e7e7f5e4e20cd2bd47ad9bc2d1f5309eb89489928290030190a450505050505050565b4690565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115610df65760405162461bcd60e51b81526004018080602001828103825260228152602001806110826022913960400191505060405180910390fd5b8360ff16601b1480610e0b57508360ff16601c145b610e465760405162461bcd60e51b815260040180806020018281038252602281526020018061110f6022913960400191505060405180910390fd5b604080516000808252602080830180855289905260ff88168385015260608301879052608083018690529251909260019260a080820193601f1981019281900390910190855afa158015610e9e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610f06576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b95945050505050565b600081815b8551811015610fad576000868281518110610f2b57fe5b60200260200101519050808311610f725782816040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209250610fa4565b808360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092505b50600101610f14565b509092149392505050565b60035463ffffffff1660009081526004602090815260408083206101008504845290915290208054600160ff9093169290921b909117905556fe4d65726b6c654469737472696275746f723a2044726f7020616c726561647920636c61696d65642e436c61696d286164647265737320726563697069656e742c75696e7432353620616d6f756e742c75696e743332207765656b2c75696e7432353620696e646578294d65726b6c654469737472696275746f723a20436c61696d696e672069732066726f7a656e2e45434453413a20696e76616c6964207369676e6174757265202773272076616c75654d65726b6c654469737472696275746f723a20436f6e7472616374206e6f742066726f7a656e2e4d65726b6c654469737472696275746f723a20496e76616c69642070726f6f662e4d65726b6c654469737472696275746f723a205472616e73666572206661696c65642e45434453413a20696e76616c6964207369676e6174757265202776272076616c7565454950373132446f6d61696e28737472696e67206e616d652c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e7472616374294f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212200a77e00f3454d6f207f57bf66cf0f5a9f83462540232ef032773e9ef6a14015564736f6c63430006090033",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1568,
        "contract": "contracts/test/UMA_MerkleDistributor.sol:UMA_MerkleDistributor",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1570,
        "contract": "contracts/test/UMA_MerkleDistributor.sol:UMA_MerkleDistributor",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1905,
        "contract": "contracts/test/UMA_MerkleDistributor.sol:UMA_MerkleDistributor",
        "label": "merkleRoot",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 1908,
        "contract": "contracts/test/UMA_MerkleDistributor.sol:UMA_MerkleDistributor",
        "label": "week",
        "offset": 0,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 1911,
        "contract": "contracts/test/UMA_MerkleDistributor.sol:UMA_MerkleDistributor",
        "label": "frozen",
        "offset": 4,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 1917,
        "contract": "contracts/test/UMA_MerkleDistributor.sol:UMA_MerkleDistributor",
        "label": "claimedBitMap",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1921,
        "contract": "contracts/test/UMA_MerkleDistributor.sol:UMA_MerkleDistributor",
        "label": "totalClaimed",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}